// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/template.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auction_SendBid_FullMethodName         = "/proto.Auction/SendBid"
	Auction_GetHighestBid_FullMethodName   = "/proto.Auction/GetHighestBid"
	Auction_HandleNewClient_FullMethodName = "/proto.Auction/HandleNewClient"
	Auction_BidStream_FullMethodName       = "/proto.Auction/BidStream"
)

// AuctionClient is the client API for Auction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionClient interface {
	SendBid(ctx context.Context, in *BidMessage, opts ...grpc.CallOption) (*Ack, error)
	GetHighestBid(ctx context.Context, in *Name, opts ...grpc.CallOption) (*AckAndBid, error)
	HandleNewClient(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (*Ack, error)
	BidStream(ctx context.Context, opts ...grpc.CallOption) (Auction_BidStreamClient, error)
}

type auctionClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionClient(cc grpc.ClientConnInterface) AuctionClient {
	return &auctionClient{cc}
}

func (c *auctionClient) SendBid(ctx context.Context, in *BidMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, Auction_SendBid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionClient) GetHighestBid(ctx context.Context, in *Name, opts ...grpc.CallOption) (*AckAndBid, error) {
	out := new(AckAndBid)
	err := c.cc.Invoke(ctx, Auction_GetHighestBid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionClient) HandleNewClient(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, Auction_HandleNewClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionClient) BidStream(ctx context.Context, opts ...grpc.CallOption) (Auction_BidStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Auction_ServiceDesc.Streams[0], Auction_BidStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &auctionBidStreamClient{stream}
	return x, nil
}

type Auction_BidStreamClient interface {
	Send(*BidMessage) error
	Recv() (*BidMessage, error)
	grpc.ClientStream
}

type auctionBidStreamClient struct {
	grpc.ClientStream
}

func (x *auctionBidStreamClient) Send(m *BidMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *auctionBidStreamClient) Recv() (*BidMessage, error) {
	m := new(BidMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuctionServer is the server API for Auction service.
// All implementations must embed UnimplementedAuctionServer
// for forward compatibility
type AuctionServer interface {
	SendBid(context.Context, *BidMessage) (*Ack, error)
	GetHighestBid(context.Context, *Name) (*AckAndBid, error)
	HandleNewClient(context.Context, *JoinMessage) (*Ack, error)
	BidStream(Auction_BidStreamServer) error
	mustEmbedUnimplementedAuctionServer()
}

// UnimplementedAuctionServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionServer struct {
}

func (UnimplementedAuctionServer) SendBid(context.Context, *BidMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBid not implemented")
}
func (UnimplementedAuctionServer) GetHighestBid(context.Context, *Name) (*AckAndBid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHighestBid not implemented")
}
func (UnimplementedAuctionServer) HandleNewClient(context.Context, *JoinMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleNewClient not implemented")
}
func (UnimplementedAuctionServer) BidStream(Auction_BidStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidStream not implemented")
}
func (UnimplementedAuctionServer) mustEmbedUnimplementedAuctionServer() {}

// UnsafeAuctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionServer will
// result in compilation errors.
type UnsafeAuctionServer interface {
	mustEmbedUnimplementedAuctionServer()
}

func RegisterAuctionServer(s grpc.ServiceRegistrar, srv AuctionServer) {
	s.RegisterService(&Auction_ServiceDesc, srv)
}

func _Auction_SendBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServer).SendBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auction_SendBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServer).SendBid(ctx, req.(*BidMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auction_GetHighestBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServer).GetHighestBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auction_GetHighestBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServer).GetHighestBid(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auction_HandleNewClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServer).HandleNewClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auction_HandleNewClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServer).HandleNewClient(ctx, req.(*JoinMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auction_BidStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuctionServer).BidStream(&auctionBidStreamServer{stream})
}

type Auction_BidStreamServer interface {
	Send(*BidMessage) error
	Recv() (*BidMessage, error)
	grpc.ServerStream
}

type auctionBidStreamServer struct {
	grpc.ServerStream
}

func (x *auctionBidStreamServer) Send(m *BidMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *auctionBidStreamServer) Recv() (*BidMessage, error) {
	m := new(BidMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Auction_ServiceDesc is the grpc.ServiceDesc for Auction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Auction",
	HandlerType: (*AuctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBid",
			Handler:    _Auction_SendBid_Handler,
		},
		{
			MethodName: "GetHighestBid",
			Handler:    _Auction_GetHighestBid_Handler,
		},
		{
			MethodName: "HandleNewClient",
			Handler:    _Auction_HandleNewClient_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidStream",
			Handler:       _Auction_BidStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/template.proto",
}
